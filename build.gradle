plugins {
  id 'com.gradle.build-scan' version '2.2.1'
  id 'nu.studer.plugindev' version '1.0.12'
  id 'nu.studer.credentials' version '1.0.7'
  id 'groovy'
}

group = 'nu.studer'
version = '1.0.8-DEV'

buildScan {
  termsOfServiceUrl 'https://gradle.com/terms-of-service'
  termsOfServiceAgree 'yes'
}

dependencies {
  compile "nu.studer:java-ordered-properties:1.0.2"
  compile "commons-codec:commons-codec:1.11"

  testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
    exclude module: 'groovy-all'
  }
}

plugindev {
  pluginDescription 'Gradle plugin to store and access encrypted credentials for use in Gradle builds.'
  pluginImplementationClass 'nu.studer.gradle.credentials.CredentialsPlugin'
  pluginLicenses 'Apache-2.0'
  pluginTags 'gradle', 'plugin', 'credentials'
  authorId 'etiennestuder'
  authorName 'Etienne Studer'
  authorEmail 'etienne@studer.nu'
  projectUrl 'https://github.com/etiennestuder/gradle-credentials-plugin'
  projectInceptionYear '2014'
  done()
}

bintray {
  user = credentials.BINTRAY_USER
  key = credentials.BINTRAY_API_KEY
  pkg.repo = 'gradle-plugins'
  dryRun = false
}

test {
  maxParallelForks = 2
}

def testAll = tasks.create('testAll') {
  description = 'Runs the Gradle cross-version tests.'
  group = 'Verification'
}

task createClasspathManifest {
  def outputDir = file("$buildDir/$name")

  inputs.files sourceSets.main.runtimeClasspath
  outputs.dir outputDir

  doLast {
    outputDir.mkdirs()
    file("$outputDir/plugin-classpath.txt").text = sourceSets.main.runtimeClasspath.join("\n")
  }
}

dependencies {
  testRuntime files(createClasspathManifest)
}

List<String> testedGradleVersions = []
testedGradleVersions << "5.5"
testedGradleVersions << "5.1"
testedGradleVersions << "5.0"
testedGradleVersions << "4.10.3"
testedGradleVersions << "4.6"

testedGradleVersions.each { version ->
  project.tasks.create("test_" + version.replaceAll("[^a-zA-Z0-9]", "_"), Test).with {
    systemProperty 'testContext.gradleVersion', version
    testAll.dependsOn(it)
  }
}
